#!/usr/bin/env python3
# coding: utf-8

import sys
import argparse

def bit(data,index):
  '''
  Returns the `index'-th bit of `data' (0 or 1)
  '''
  assert(type(data) == bytes)
  # 8 bits by byte
  assert(index * 8 < len(data))
  return data[int(index/8)] & (1<<(index % 8))

def get_bits(data,oa,ob):
  r = 0

  if oa <= ob:
    return None

  for i in range(oa,ob):
    r <<= 1
    r += bit(data,i)
  return r

def entropy(data,oa,ob,nbits):
  return e


def analyze(data,blocksize,nblocks):

  #i = 0
  #for index in range(0,len(data),nblocks):
  #  if i % linejump == 0:
  #    sys.stdout.write('\n{:4x} '.format(i*nblocks))

  #  sys.stdout.write(cool(entropy(data[index:index+nblocks])))
  #  sys.stdout.flush()
  #  i += 1
  pass



grad_ascii = ' .,;=+#'
grad_up = ' ▁▂▃▄▅▆▇█'
grad_shades = ' ░▒▓█'
grad_color = ["\x1b[3"+str(i)+"m█\x1b[0m" for i in [2,6,4,5,0,3,1]]

grad = grad_color

def cool(x):
  return grad[int(x * (len(grad)-1))]


if __name__ == '__main__':
  parser = argparse.ArgumentParser()

  parser.add_argument('-f','--file',
    nargs='+',
    type=argparse.FileType('r'),
    default=[sys.stdin],
    help='The file(s) to analyze')
  parser.add_argument('-bs','--blocksize',
    help='The size in bits of every information block',
    type=int,
    default=8)
  parser.add_argument('-nb','--nblocks',
    help='The number of blocks in a chunk',
    type=int,
    default=8)
  
  args = parser.parse_args()


  print('Gradient : '+' '.join(['{:0.2f} '.format(i/len(grad))+grad[i] for i in range(len(grad))])+' 1.0')

  for file in args.file:
    data = file.read()
    print('Analyzing file « \x1b[32m{}\x1b[0m » ({} bytes)'.format(file.name,len(data)))
    analyze(file,args.blocksize,args.nblocks)
